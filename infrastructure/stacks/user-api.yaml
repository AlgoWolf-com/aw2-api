AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Architectures:
      - x86_64
    Timeout: 30
    Tracing: Active
    VpcConfig:
      SecurityGroupIds:
        - sg-0992febe102547325 # TODO
      SubnetIds:
        - subnet-070f0d377a864f396 # TODO
        - subnet-01484b4b177c7e7c9 # TODO
    Tags:
      Owner: "Ethan Hollins"
      Environment: !Sub ${EnvironmentName}
  
  HttpApi:
    Tags:
      Owner: "Ethan Hollins"
      Environment: !Sub ${EnvironmentName}

Description: >
  aw2-api-user-api

  User api for AlgoWolf v2

Parameters:
  EnvironmentName:
    Type: String
  ApiHostedZoneId:
    Type: String

Conditions:
  IsProd: !Equals [!Ref EnvironmentName, aw2-prod]
  IsStaging: !Equals [!Ref EnvironmentName, aw2-staging]
  IsProdOrStaging: !Or [Condition: IsProd, Condition: IsStaging]

Resources:
  UserHttpApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: IsProdOrStaging
    Properties:
      DomainName: 
        Fn::If:
          - IsProd
          - api.ethanhollins.com
          - sandbox-api.ethanhollins.com
      DomainNameConfigurations:
        - CertificateArn: 
            Fn::If:
              - IsProd
              - "arn:aws:acm:ap-southeast-2:977407872120:certificate/32b3abe2-c186-4295-a08d-fce46bec311c"
              - "arn:aws:acm:ap-southeast-2:977407872120:certificate/9f700aba-aef7-4345-b761-3a2ff2af06a0"
          EndpointType: REGIONAL

  UserHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowCredentials: false
        AllowHeaders:
          - authorization
          - content-type
        AllowMethods:
          - OPTIONS
          - GET
          - POST
          - PUT
        AllowOrigins:
          - https://www.ethanhollins.com
          - https://ethanhollins.com
          - https://sandbox.ethanhollins.com
          - https://www.algowolf.com
          - https://algowolf.com
      StageName: 
        Fn::If:
          - IsProd
          - Prod
          - Fn::If:
            - IsStaging
            - Staging
            - Dev

  UserHttpApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: IsProdOrStaging
    Properties:
      DomainName: !Ref UserHttpApiDomainName
      Stage:
        Fn::If:
          - IsProd
          - Prod
          - Fn::If:
            - IsStaging
            - Staging
            - Dev
      ApiId: !Ref UserHttpApi

  UserApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Events: 
        UserEvent: 
          Type: HttpApi
          Properties:
            ApiId: !Ref UserHttpApi
            Method: ANY
            Path: /users/{proxy+}
      Environment:
        Variables:
          COGNITO_APP_CLIENT_ID: 6ogk3o03rlqivg2jtmslve4eu3 # TODO: Retrieve from SSM
      AutoPublishAlias: live
      DeploymentPreference:
        Type: !If
          - IsProd
          - Linear10PercentEvery1Minute
          - AllAtOnce
    Metadata:
      DockerContext: ../../
      Dockerfile: ./user_api/Dockerfile

  UserApiSmsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                sts:ExternalId: e6873a64-46e6-44bf-8e67-446fda0ff914 # TODO: Parameterize
      Policies: 
        - PolicyName: !Sub ${EnvironmentName}-UserApiUserPoolPublishSns
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "sns:publish"
                Resource: "*"

  UserApiUserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Your username is {username} and temporary password is {####}. '
          EmailSubject: Your temporary password
          SMSMessage: 'Your username is {username} and temporary password is {####}. '
      AutoVerifiedAttributes:
        - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: false
        DeviceOnlyRememberedOnUserPrompt: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      EmailVerificationMessage: 'Your verification code is {####}. '
      EmailVerificationSubject: Your verification code
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: false
          Name: sub
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '1'
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: given_name
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: family_name
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: email
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'
      SmsAuthenticationMessage: 'Your verification code is {####}. '
      SmsConfiguration:
        ExternalId: e6873a64-46e6-44bf-8e67-446fda0ff914 # TODO: Parameterize
        SnsCallerArn: !GetAtt UserApiSmsRole.Arn
        SnsRegion: ap-southeast-2
      SmsVerificationMessage: 'Your verification code is {####}. '
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: 'Your verification code is {####}. '
        EmailSubject: Your verification code
        SmsMessage: 'Your verification code is {####}. '
      UserPoolTags:
        Owner: "Ethan Hollins"
        Environment: !Sub ${EnvironmentName}

  UserApiAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      Precedence: 0
      UserPoolId: !Ref UserApiUserPool

  UserApiUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: User
      Precedence: 1
      UserPoolId: !Ref UserApiUserPool

  UserApiAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AccessTokenValidity: 60
      AllowedOAuthFlowsUserPoolClient: false
      ClientName: !Sub ${EnvironmentName}-UserApiClient
      EnableTokenRevocation: true
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      IdTokenValidity: 60
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
        - email
        - family_name
        - given_name
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      UserPoolId: !Ref UserApiUserPool
      WriteAttributes:
        - email
        - family_name
        - given_name

  UserApiUserTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    # Condition: IsProdOrStaging
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      TableName: !Sub ${EnvironmentName}-user-table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Owner
          Value: "Ethan Hollins"
        - Key: Environment
          Value: !Sub ${EnvironmentName}

  UserApiConnectionTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    # Condition: IsProdOrStaging
    Properties:
      AttributeDefinitions:
        - AttributeName: connection_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: connection_id 
          KeyType: HASH
        - AttributeName: user_id
          KeyType: RANGE
      TableName: !Sub ${EnvironmentName}-connection-table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Owner
          Value: "Ethan Hollins"
        - Key: Environment
          Value: !Sub ${EnvironmentName}

  UserApiStrategyTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    # Condition: IsProdOrStaging
    Properties:
      AttributeDefinitions:
        - AttributeName: strategy_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: strategy_id 
          KeyType: HASH
        - AttributeName: user_id
          KeyType: RANGE
      TableName: !Sub ${EnvironmentName}-strategy-table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Owner
          Value: "Ethan Hollins"
        - Key: Environment
          Value: !Sub ${EnvironmentName}

Outputs:
  UserHttpApiDomainName:
    Condition: IsProdOrStaging
    Value: !Ref UserHttpApiDomainName
  UserHttpApiDomainNameRegionalDomainName:
    Condition: IsProdOrStaging
    Value: !GetAtt UserHttpApiDomainName.RegionalDomainName
