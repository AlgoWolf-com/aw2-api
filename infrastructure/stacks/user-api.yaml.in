AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Handler: function.handler
    Runtime: python3.9
    Architectures:
      - x86_64
    Timeout: 30
    Tracing: Active

  Api:
    TracingEnabled: true

Description: >
  aw2-api-user-api

  User api for AlgoWolf v2

Parameters:
  EnvironmentName:
    Type: String

Resources:
  UserApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../user_api/
      Environment:
        Variables:
          COGNITO_APP_CLIENT_ID: 6ogk3o03rlqivg2jtmslve4eu3 # TODO: Retrieve from SSM

  UserApiDataSourceServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies: 
        - PolicyName: !Sub ${EnvironmentName}-AppSyncInvokeLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource: !GetAtt UserApiFunction.Arn

  UserApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${EnvironmentName}-UserApi
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: ALLOW
        UserPoolId: !Ref UserApiUserPool
      AdditionalAuthenticationProviders:
        - AuthenticationType: API_KEY
      XrayEnabled: true

  UserApiSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt UserApi.ApiId
      Definition: #exec tools/cfn-snippet-generator file-to-yaml-multiline ../user_api/schema.gql

  UserApiDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt UserApi.ApiId
      Type: AWS_LAMBDA
      Name: !Join ["_", !Split ["-", !Sub "${EnvironmentName}-UserApiDataSource"]]
      ServiceRoleArn: !GetAtt UserApiDataSourceServiceRole.Arn
      Description: "Data source for User Api"
      LambdaConfig:
        LambdaFunctionArn: !GetAtt UserApiFunction.Arn

  #exec tools/cfn-snippet-generator generate-graphql-resolver UserApi UserApiDataSource Query hello
  #exec tools/cfn-snippet-generator generate-graphql-resolver UserApi UserApiDataSource Query login

  UserApiSmsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cognito-idp.amazonaws.com
            Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                sts:ExternalId: e6873a64-46e6-44bf-8e67-446fda0ff914 # TODO: Parameterize
      Policies: 
        - PolicyName: !Sub ${EnvironmentName}-UserApiUserPoolPublishSns
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "sns:publish"
                Resource: "*"

  UserApiUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Your username is {username} and temporary password is {####}. '
          EmailSubject: Your temporary password
          SMSMessage: 'Your username is {username} and temporary password is {####}. '
      AutoVerifiedAttributes:
        - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: false
        DeviceOnlyRememberedOnUserPrompt: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      EmailVerificationMessage: 'Your verification code is {####}. '
      EmailVerificationSubject: Your verification code
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: false
          Name: sub
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '1'
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: given_name
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: family_name
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'
        - AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: email
          Required: true
          StringAttributeConstraints:
            MaxLength: '2048'
            MinLength: '0'
      SmsAuthenticationMessage: 'Your verification code is {####}. '
      SmsConfiguration:
        ExternalId: e6873a64-46e6-44bf-8e67-446fda0ff914 # TODO: Parameterize
        SnsCallerArn: !GetAtt UserApiSmsRole.Arn
        SnsRegion: ap-southeast-2
      SmsVerificationMessage: 'Your verification code is {####}. '
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: 'Your verification code is {####}. '
        EmailSubject: Your verification code
        SmsMessage: 'Your verification code is {####}. '

  UserApiAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      Precedence: 0
      UserPoolId: !Ref UserApiUserPool

  UserApiUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: User
      Precedence: 1
      UserPoolId: !Ref UserApiUserPool

  UserApiAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AccessTokenValidity: 60
      AllowedOAuthFlowsUserPoolClient: false
      ClientName: !Sub ${EnvironmentName}-UserApiClient
      EnableTokenRevocation: true
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      IdTokenValidity: 60
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
        - email
        - family_name
        - given_name
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      UserPoolId: !Ref UserApiUserPool
      WriteAttributes:
        - email
        - family_name
        - given_name

  # UserApiIdentityPool:
  #   Type: AWS::Cognito::IdentityPool
  #   Properties:
  #     IdentityPoolName: !Sub ${EnvironmentName}-UserApiIdentityPool
  #     AllowUnauthenticatedIdentities: true
  #     CognitoIdentityProviders:
  #       - ClientId: !Ref UserApiAppClient
  #         ProviderName: !GetAtt UserApiUserPool.ProviderName

  # UserApiIdentityPoolRoles:
  #   Type: AWS::Cognito::IdentityPoolRoleAttachment
  #   Properties:
  #     IdentityPoolId: !Ref UserApiIdentityPool
  #     Roles:
  #       unauthenticated: !GetAtt UserApiUnAuthRole.Arn
    
  # UserApiUnAuthRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             Federated: "cognito-identity.amazonaws.com"
  #           Action:
  #             - "sts:AssumeRoleWithWebIdentity"
  #     Policies:
  #       - PolicyName: !Sub ${EnvironmentName}-AppSyncCognitoPolicy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - appsync:GraphQL
  #               Resource: 
  #                 - !Join [ "", [ !GetAtt UserApi.Arn, "/types/Query/fields/hello" ] ]
  #                 - !Join [ "", [ !GetAtt UserApi.Arn, "/types/Query/fields/login" ] ]
                